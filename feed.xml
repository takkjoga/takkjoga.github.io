<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>いくら寝ても眠たい</title>
  <id>http://blog.takumi-onodera.work</id>
  <link href="http://blog.takumi-onodera.work"/>
  <link href="http://blog.takumi-onodera.work/feed.xml" rel="self"/>
  <updated>2015-12-03T13:05:00+09:00</updated>
  <author>
    <name>takkjoga</name>
  </author>
  <entry>
    <title>middlemanとGitHub Pagesでブログを5分で開設！ほか盛りだくさん！</title>
    <link rel="alternate" href="http://blog.takumi-onodera.work/2015/12/03/middleman-github-pages/"/>
    <id>http://blog.takumi-onodera.work/2015/12/03/middleman-github-pages/</id>
    <published>2015-12-03T13:05:00+09:00</published>
    <updated>2015-12-03T13:38:56+09:00</updated>
    <summary type="html">&lt;p&gt;&lt;img title="Kobito.cqGEgl.png" alt="Kobito.cqGEgl.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/28c5afca-2916-f806-3c67-b9e3f21fbdb5.png" /&gt;&lt;br /&gt;
※↑の画像は関係ありません。&lt;/p&gt;

&lt;h1 id="advent-calendar-のために、自分専用のブログを作ろう！"&gt;advent calendar のために、自分専用のブログを作ろう！&lt;/h1&gt;

&lt;p&gt;と思い立った方は、是非見て行ってくださいね( &lt;sup&gt;ω^&lt;/sup&gt; )&lt;/p&gt;

&lt;p&gt;仕事で &lt;a href="https://middlemanapp.com"&gt;middleman&lt;/a&gt; を触る機会があったため、これを機にちょっとまとめてみました。&lt;br /&gt;
&lt;img title="スクリーンショット 2015-12-03 10.12.07.png" alt="スクリーンショット 2015-12-03 10.12.07.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/cbe49151-d0bc-adad-6e62-aefe40039e79.png" /&gt;&lt;/p&gt;

&lt;p&gt;手元の環境は、以下です。&lt;br /&gt;
�* Mac OSX 10.10.5 Yosemite&lt;/p&gt;

&lt;p&gt;GitHub のアカウントが無い場合は、早速作っておきましょう。&lt;br /&gt;
アカウントが作れたら、&lt;a href="https://help.github.com/articles/generating-ssh-keys/"&gt;ここ&lt;/a&gt;を参考にSSH鍵の登録をしておきましょう。&lt;/p&gt;

&lt;p&gt;今回はテンプレ...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img title="Kobito.cqGEgl.png" alt="Kobito.cqGEgl.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/28c5afca-2916-f806-3c67-b9e3f21fbdb5.png" /&gt;&lt;br&gt;
※↑の画像は関係ありません。&lt;/p&gt;

&lt;h1 id="advent-calendar-のために、自分専用のブログを作ろう！"&gt;advent calendar のために、自分専用のブログを作ろう！&lt;/h1&gt;

&lt;p&gt;と思い立った方は、是非見て行ってくださいね( &lt;sup&gt;ω^&lt;/sup&gt; )&lt;/p&gt;

&lt;p&gt;仕事で &lt;a href="https://middlemanapp.com"&gt;middleman&lt;/a&gt; を触る機会があったため、これを機にちょっとまとめてみました。&lt;br&gt;
&lt;img title="スクリーンショット 2015-12-03 10.12.07.png" alt="スクリーンショット 2015-12-03 10.12.07.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/cbe49151-d0bc-adad-6e62-aefe40039e79.png" /&gt;&lt;/p&gt;

&lt;p&gt;手元の環境は、以下です。&lt;br&gt;
�* Mac OSX 10.10.5 Yosemite&lt;/p&gt;

&lt;p&gt;GitHub のアカウントが無い場合は、早速作っておきましょう。&lt;br&gt;
アカウントが作れたら、&lt;a href="https://help.github.com/articles/generating-ssh-keys/"&gt;ここ&lt;/a&gt;を参考にSSH鍵の登録をしておきましょう。&lt;/p&gt;

&lt;p&gt;今回はテンプレートに &lt;code&gt;blog-drops&lt;/code&gt; を使ってみます。&lt;br&gt;
テンプレートのインストール方法は、他のテンプレートでも同様です。&lt;/p&gt;

&lt;h2 id="最初に-blog-drops-のインストール"&gt;最初に &lt;code&gt;blog-drops&lt;/code&gt; のインストール&lt;/h2&gt;

&lt;p&gt;ホームディレクトリに &lt;code&gt;.middleman&lt;/code&gt; ディレクトリを作って、その中にインストールしておきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/
mkdir .middleman
git clone https://github.com/5t111111/middleman-blog-drops-template.git ~/middleman/blog-drops
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に blog 関連のファイルを置くディレクトリを決めて、以下のコマンドで blog プロジェクトを作成 ＆ 初期化します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/
middleman init my_blog_project --template=blog-drops --skip-bundle
cd my_blog_project
bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;blog-drops では以下も実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="github-pages"&gt;GitHub Pages&lt;/h1&gt;

&lt;p&gt;公開するホストには &lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; を選択しました。&lt;/p&gt;

&lt;h2 id="まずはリポジトリの作成"&gt;まずはリポジトリの作成&lt;/h2&gt;

&lt;p&gt;GitHub の&lt;a href="https://github.com/new"&gt;新規リポジトリ作成ページ&lt;/a&gt; の &lt;code&gt;Repository name&lt;/code&gt; に&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;.github.io&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の &lt;code&gt;{username}&lt;/code&gt; に自分のGitHubアカウントの名前を入力します。&lt;br&gt;
 自分の場合は、アカウント名を &lt;a href="https://github.com/takkjoga"&gt;takkjoga&lt;/a&gt; にしているので、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;takkjoga.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;になります。&lt;/p&gt;

&lt;h2 id="リモートリポジトリ"&gt;リモートリポジトリ&lt;/h2&gt;

&lt;p&gt;自分の使いやすい git クライアントで、さっき作ったリポジトリを登録します。&lt;br&gt;
自分はターミナルで使用するのが慣れているので、以下のようになります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/my_blog_project
git init
git remote add origin git@github.com:takkjoga/takkjoga.github.io.git

# 早速公開！
何も考えず、以下のコマンドでデフォルトの状態を公開しちゃいます。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bundle exec middleman build&lt;br&gt;
bundle exec middleman deploy&lt;br&gt;
```&lt;/p&gt;

&lt;p&gt;デプロイが終わったら、&lt;code&gt;{username}.github.io&lt;/code&gt;に早速アクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img title="スクリーンショット 2015-12-03 10.46.46.png" alt="スクリーンショット 2015-12-03 10.46.46.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/ed259585-f1dd-6857-6dc8-7de72972c9c5.png" /&gt;&lt;/p&gt;

&lt;p&gt;できた！！&lt;br&gt;
簡単だなぁ。。&lt;/p&gt;

&lt;h1 id="せっかくだし自分のドメインで公開したい"&gt;せっかくだし自分のドメインで公開したい&lt;/h1&gt;

&lt;p&gt;自分用のサーバーにあてているドメインを持っている人なら、ブログにもそのドメインを使いたい人は少なくないと思います。&lt;br&gt;
GitHub Pagesにはカスタムドメイン設定ができる仕組みがあるようです。&lt;br&gt;
&lt;a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/"&gt;ここ&lt;/a&gt;に説明が書いてあるので、やってみましょう。&lt;/p&gt;

&lt;h2 id="cnameファイルをコミット"&gt;CNAMEファイルをコミット&lt;/h2&gt;

&lt;p&gt;GitHubの master ブランチのページで、&lt;code&gt;New file&lt;/code&gt; をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img title="スクリーンショット 2015-12-03 11.03.20.png" alt="スクリーンショット 2015-12-03 11.03.20.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/b29456a6-9778-d2b0-029f-d0a3439ee090.png" /&gt;&lt;/p&gt;

&lt;p&gt;ファイル名に &lt;code&gt;CNAME&lt;/code&gt;、ファイルに設定したいドメインを入力します。&lt;br&gt;
自分の場合は &lt;code&gt;takumi-onodera.work&lt;/code&gt; というドメインを持っているので、&lt;code&gt;blog.takumi-onodera.work&lt;/code&gt; を記述しました。&lt;/p&gt;

&lt;p&gt;&lt;img title="スクリーンショット 2015-12-03 11.09.02.png" alt="スクリーンショット 2015-12-03 11.09.02.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/43b13fa4-9a63-bc39-a0ab-d4de9b71b9dd.png" /&gt;&lt;/p&gt;

&lt;p&gt;同じページの下の方にコミットコメントを入力します。&lt;br&gt;
新しいブランチは切らずに master にコミットするので、🔘ラジオボタンはそのままで、&lt;code&gt;Commit new file&lt;/code&gt; をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img title="スクリーンショット 2015-12-03 11.14.14.png" alt="スクリーンショット 2015-12-03 11.14.14.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/d8fb5efe-c7dd-36e9-6e5f-706013b06909.png" /&gt;&lt;/p&gt;

&lt;p&gt;ドメインを管理しているサービスのDNSレコード管理ページなどで、&lt;code&gt;CNAME&lt;/code&gt; を設定します。&lt;br&gt;
&lt;code&gt;CNAME&lt;/code&gt;のvalueには、&lt;code&gt;{username}.github.io&lt;/code&gt; を設定します。&lt;br&gt;
設定が完了したら、DNSの浸透を待つのみ。&lt;/p&gt;

&lt;h2 id="注意！！"&gt;注意！！&lt;/h2&gt;

&lt;p&gt;GitHubサイト上でファイルを追加したので、`&lt;code&gt;git pull origin master&lt;/code&gt; することを忘れずに！&lt;br&gt;
忘れてビルドアンドデプロイすると、ファイルが消えたりします。。&lt;br&gt;
最初からローカルでCNAMEファイルを作成して、commit &amp;amp; push している場合は問題ありません。&lt;/p&gt;

&lt;h1 id="404ページを設定する"&gt;404ページを設定する&lt;/h1&gt;

&lt;p&gt;存在しないURLにアクセスされたときに表示されるページを設定します。&lt;br&gt;
これにはちょっとファイルをいじる必要があります。&lt;br&gt;
&lt;a href="https://help.github.com/articles/custom-404-pages/"&gt;ここ&lt;/a&gt; に説明がありますが、ルートディレクトリに&lt;code&gt;404.html&lt;/code&gt;というファイルが存在すれば、そのファイルが404ページとして表示されるようにです。&lt;/p&gt;

&lt;p&gt;今回は blog_drops を使用しているので、あらかじめ用意されている404ページをちょっと修正します。&lt;br&gt;
&lt;code&gt;source/404.html.slim&lt;/code&gt; のファイルの一番上に、&lt;a href="http://jekyllrb.com/docs/frontmatter/"&gt;YAML front matter&lt;/a&gt;形式で &lt;code&gt;directory_index: false&lt;/code&gt; を追記します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
directory_index: false
---

h1
  | 404
h3
  | Page not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは、ビルドアンドデプロイ。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle exec middleman build
bundle exec middleman deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デプロイが完了したら、ドメインに適当なパスを入力して確認してみましょう。&lt;/p&gt;

&lt;h1 id="他にもいろいろなテンプレート"&gt;他にもいろいろなテンプレート&lt;/h1&gt;

&lt;p&gt;Safariのレスポンシブデザインモードでスクショしました。&lt;br&gt;
５分でできる！をテーマにしているので、デフォルトのデザインのみ貼ってあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/5t111111/middleman-blog-drops-template"&gt;middleman-blog-drops-template&lt;/a&gt;&lt;br&gt;
&lt;img title="スクリーンショット 2015-12-01 20.23.47.png" alt="スクリーンショット 2015-12-01 20.23.47.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/dced97fb-3bc8-2eb2-ba7c-cd8fe6a8dd1f.png" /&gt;&lt;br&gt;
&lt;img title="スクリーンショット 2015-12-01 20.24.01.png" alt="スクリーンショット 2015-12-01 20.24.01.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/8864015c-756f-c262-6a6a-c85bfa744c01.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/5t111111/middleman-blog-bourbon-template"&gt;middleman-blog-bourbon-template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt; で読み込んでいる &lt;code&gt;slim&lt;/code&gt; のバージョンを上げないと &lt;code&gt;bundle exec middleman server&lt;/code&gt; したときにエラーが出ました。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-gem 'slim', '~&amp;gt; 2.0.2'
+gem 'slim', '~&amp;gt; 3.0.6'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あと、以下を追加。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+$base-accent-color: #000000;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img title="スクリーンショット 2015-12-01 21.38.08.png" alt="スクリーンショット 2015-12-01 21.38.08.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/79ee0b5b-5513-82ec-014e-1fee81ca18a9.png" /&gt;&lt;br&gt;
&lt;img title="スクリーンショット 2015-12-01 21.38.22.png" alt="スクリーンショット 2015-12-01 21.38.22.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/2c11ff3e-84f3-fc91-a15e-f36307ea6836.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nathos/amicus"&gt;amicus&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;要カスタマイズとのこと。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img title="スクリーンショット 2015-12-01 21.52.35.png" alt="スクリーンショット 2015-12-01 21.52.35.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/82711db6-be7c-817b-1726-c039dade2268.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pzi/middleman-basis"&gt;middleman-basis&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトページはめちゃシンプルでションボリ.com。機能モリモリなので &lt;code&gt;bundle install&lt;/code&gt; に時間もかかる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img title="スクリーンショット 2015-12-01 22.03.57.png" alt="スクリーンショット 2015-12-01 22.03.57.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/1feda050-c9e6-f089-e9b8-e846082e1fa6.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bryanbraun/franklin"&gt;franklin&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;オンラインブックをイメージしてるようなので、落ち着いてて優しい雰囲気です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img title="スクリーンショット 2015-12-01 22.29.44.png" alt="スクリーンショット 2015-12-01 22.29.44.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/240a09b1-43f0-9d4c-b673-47dc1e3adf3c.png" /&gt;&lt;br&gt;
&lt;img title="スクリーンショット 2015-12-01 22.30.03.png" alt="スクリーンショット 2015-12-01 22.30.03.png" src="https://qiita-image-store.s3.amazonaws.com/0/32480/258ab21e-adaf-a729-d024-79745ec49139.png" /&gt;&lt;/p&gt;

&lt;h1 id="rails-の-activerecord-を参照する"&gt;Rails の ActiveRecord を参照する&lt;/h1&gt;

&lt;h2 id="gemfile-に以下を追加"&gt;Gemfile に以下を追加&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem 'activerecord'
gem "mysql2", '~&amp;gt; 0.3.13'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このとき、mysql2 のバージョンの指定をしないと、mysql2 が認識されないので注意&lt;/p&gt;

&lt;h2 id="config.rb-に以下を追加"&gt;config.rb に以下を追加&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require 'active_record'
require 'yaml'

config = YAML.load_file('../config/database.yml')

ActiveRecord::Base.establish_connection config['development']
ActiveRecord::Base.logger = Logger.new(STDERR) # ログにSQLを出力

## 各Modelを使えるようにする
Dir.glob("../app/models/**/*.rb").each do |file|
  require_dependency file
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記を外部ファイルにするとき、自分は最初ファイル名を active_record.rb として保存していたが、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/path/to/project/middleman/active_record.rb:6:in `&amp;lt;top (required)&amp;gt;': uninitialized constant ActiveRecord (NameError)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のエラーが出続けて悩みました。。&lt;/p&gt;

&lt;h2 id="modelが使えない場合"&gt;Modelが使えない場合&lt;/h2&gt;

&lt;p&gt;以下のようなエラーが出る場合&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/path/to/project/app/models/hoge.rb:28:in `&amp;lt;class:Hoge&amp;gt;': uninitialized constant Hoge::Rails (NameError)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Railsのシガラミに囚われてしまっているので、下記のように書き換えてリレーション周りを再定義します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dir.glob("../app/models/*.rb") do |file|
  self.class.const_set File.basename(file, '.rb').camelize, Class.new(ActiveRecord::Base)
end

class Hoge &amp;lt; ActiveRecord::Base
  has_many :fugas
end

class Fuga &amp;lt; ActiveRecord::Base
  belongs_to :hoge
end
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>This is an example article</title>
    <link rel="alternate" href="http://blog.takumi-onodera.work/2014/11/20/odd-even/"/>
    <id>http://blog.takumi-onodera.work/2014/11/20/odd-even/</id>
    <published>2014-11-20T09:00:00+09:00</published>
    <updated>2015-12-01T19:34:19+09:00</updated>
    <summary type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.&lt;/p&gt;

&lt;h2 id="headline-2"&gt;Headline 2&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. &lt;/p&gt;

&lt;h3 id="headline-3"&gt;Headline 3&lt;/h3&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Model&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:age&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'bob'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;age: &lt;/span&gt;&lt;span class="s1"&gt;'18'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 'bob'&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;age&lt;/span&gt;  &lt;span class="c1"&gt;# =&amp;gt; 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.&lt;/p&gt;
</content>
  </entry>
</feed>
